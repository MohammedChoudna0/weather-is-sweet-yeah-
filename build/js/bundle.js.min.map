{"version":3,"sources":["app.js","openWeather-ajax.js"],"names":["$","on","hide","show","console","log","toggleClass","apiKey","getCoordinates","city","apiUrl","Promise","resolve","reject","get","data","length","getWeather","longitude","latitude","async","getWeatherByCity","coordinates","lon","lat","error","container","updateWeatherInfo","location","then","weatherInfo","text","name","weather","description","Math","round","main","temp","humidity","wind","speed","Date","sys","sunrise","toLocaleTimeString","hour","minute","sunset","deg","visibility","weatherIcon","getWeatherImage","icon","attr","image","getForecast","ajax","url","type","success","updateForecastInfo","dailyForecasts","list","filter","forecast","index","empty","forEach","date","dt","temperature","forecastDiv","toDateString","append","catch","each","item","tempCelsius","toFixed","windSpeedKmh","element","event","preventDefault","val","navigator","geolocation","getCurrentPosition","position","coords","updateWeatherInfoByCoordinates","updateForecastInfoByCoordinates"],"mappings":"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","file":"bundle.js","sourcesContent":["\r\n$(function() {\r\n    $(\"#button-addon\").on('click', function() {\r\n        $(\".in-container\").hide();\r\n        $(\".items-container\").hide();\r\n        $(\".bigItem-container\").show();\r\n    });\r\n\r\n    $(\"#home\").on('click', function() {\r\n        console.log(\"home\");\r\n        $(\".in-container\").show();\r\n        $(\".items-container\").show();\r\n        $(\".bigItem-container\").hide();\r\n        $(\".forecast-container\").hide();\r\n    });\r\n    $(\".dark-mode-button\").on('click', function() {\r\n        $(\"body\").toggleClass(\"dark-mode\");\r\n        \r\n    });\r\n    \r\n});\r\n\r\n\r\n","var apiKey = \"4ac922fbb80b818412473ff51a5be5d0\";\r\n\r\nfunction getCoordinates(city) {\r\n  var apiUrl =\r\n    \"https://api.openweathermap.org/geo/1.0/direct?q=\" +\r\n    city +\r\n    \"&limit=50&appid=\" +\r\n    apiKey;\r\n  return new Promise(function (resolve, reject) {\r\n    $.get(apiUrl, function (data) {\r\n      if (data && data.length > 0) {\r\n        resolve(data[0]);\r\n        $(\".error\").hide();\r\n      } else {\r\n        reject(\"No se ha encontrado información de \" + city);\r\n        $(\".bigItem-container\").hide();\r\n        $(\".forecast-container\").hide();\r\n        $(\".error\").show();\r\n\r\n        return ;\r\n\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction getWeather(longitude, latitude) {\r\n  var apiUrl =\r\n    \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\r\n    latitude +\r\n    \"&lon=\" +\r\n    longitude +\r\n    \"&appid=\" +\r\n    apiKey;\r\n  return new Promise(function (resolve, reject) {\r\n    $.get(apiUrl, function (data) {\r\n      if (data) {\r\n        resolve(data);\r\n      } else {\r\n        reject(\r\n          \"No se ha podido obtener la información del tiempo para las coordenadas proporcionadas.\"\r\n        );\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nasync function getWeatherByCity(city) {\r\n  try {\r\n    let coordinates = await getCoordinates(city);\r\n    let weatherInfo = await getWeather(coordinates.lon, coordinates.lat);\r\n    return weatherInfo;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nvar data = [\r\n  { city: \"Washington\" }, \r\n  { city: \"London\" }, \r\n  { city: \"Paris\" }, \r\n  { city: \"Berlin\" }, \r\n  { city: \"Tokyo\" }, \r\n  { city: \"Beijing\" }, \r\n  { city: \"Moscow\" }, \r\n  { city: \"Canberra\" }, \r\n  { city: \"Ottawa\" }, \r\n  { city: \"Brasília\" }, \r\n  { city: \"Cairo\" }, \r\n  { city: \"Rome\" }, \r\n  { city: \"Mexico City\" }, \r\n  { city: \"Madrid\" }, \r\n];\r\n\r\n$(function () {\r\n  var container = $(\".items-container .row\");\r\n\r\n  $.each(data, function (index, item) {\r\n    getWeatherByCity(item.city)\r\n      .then((weatherInfo) => {\r\n        var tempCelsius = (weatherInfo.main.temp - 273.15).toFixed(1);\r\n        var windSpeedKmh = (weatherInfo.wind.speed * 3.6).toFixed(1);\r\n        var humidity = weatherInfo.main.humidity;\r\n        var icon = weatherInfo.weather[0].icon;\r\n  \r\n        var image = getWeatherImage(icon);\r\n\r\n        // Aquí puedes usar tempCelsius y windSpeedKmh\r\n        var element = `<div class=\"col-12 col-md-6 col-lg-4 \" id=\"${item.city}\">\r\n      <div\r\n        class=\"item row my-3 justify-content-center mx-auto \"\r\n      >\r\n        <div class=\"col-5 text-center m-0 p-0\">\r\n          <picture >\r\n            <source\r\n              srcset=\"build/img/${image}.avif\"\r\n              type=\"image/avif\"\r\n            />\r\n            <source\r\n              srcset=\"build/img/${image}.webp\"\r\n              type=\"image/webp\"\r\n            />\r\n            <img\r\n              loading=\"lazy\"\r\n              src=\"build/img/${image}.png\"\r\n              alt=\"Icon cloudy\"\r\n            />\r\n          </picture>\r\n        </div>\r\n        <div class=\"col-7 text-center\">\r\n        <p class=\"p-0 m-0 text-start \">${item.city}</p>\r\n        <div class=\"row justify-content-between\">\r\n            <div class=\"col-4\">\r\n              <div>\r\n                <p class=\"item-info\">${windSpeedKmh} km/h</p>\r\n                <picture class=\"icon\">\r\n                  <source\r\n                    srcset=\"build/img/icon-wind.avif\"\r\n                    type=\"image/avif\"\r\n                  />\r\n                  <source\r\n                    srcset=\"build/img/icon-wind.webp\"\r\n                    type=\"image/webp\"\r\n                  />\r\n                  <img\r\n                    class=\"item-icon\"\r\n                    loading=\"lazy\"\r\n                    src=\"build/img/icon-wind.png\"\r\n                    alt=\"Icon wind\"\r\n                  />\r\n                </picture>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-4\">\r\n              <p class=\"item-info\">${humidity}  <br>     %</p>\r\n              <picture class=\"icon\">\r\n                <source\r\n                  srcset=\"build/img/icon-humidity.avif\"\r\n                  type=\"image/avif\"\r\n                />\r\n                <source\r\n                  srcset=\"build/img/icon-humidity.webp\"\r\n                  type=\"image/webp\"\r\n                />\r\n                <img\r\n                  class=\"item-icon\"\r\n                  loading=\"lazy\"\r\n                  src=\"build/img/icon-humidity.png\"\r\n                  alt=\"Icon humidity\"\r\n                />\r\n              </picture>\r\n            </div>\r\n            <div class=\"col-4\">\r\n              <p class=\"item-info\">${tempCelsius}<br> Cº</p>\r\n              <picture class=\"icon\">\r\n                <source\r\n                  srcset=\"build/img/temperature.avif\"\r\n                  type=\"image/avif\"\r\n                />\r\n                <source\r\n                  srcset=\"build/img/temperature.webp\"\r\n                  type=\"image/webp\"\r\n                />\r\n                <img\r\n                  class=\"item-icon\"\r\n                  loading=\"lazy\"\r\n                  src=\"build/img/temperature.png\"\r\n                  alt=\"Icon temperature\"\r\n                />\r\n              </picture>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>`;\r\n        container.append(element);\r\n\r\n        $(\"#\" + item.city).on(\"click\", function () {\r\n          updateWeatherInfo(item.city);\r\n          updateForecastInfo(item.city);\r\n          $(\".bigItem-container\").show();\r\n          $(\".items-container\").hide();\r\n        });\r\n      })\r\n\r\n  });\r\n\r\n  $(\"#location-form\").on(\"submit\", function (event) {\r\n    event.preventDefault();\r\n    var location = $(\"#location-input\").val();\r\n    updateWeatherInfo(location);\r\n    updateForecastInfo(location);\r\n  });\r\n  \r\n  $(\"#location-button\").on(\"click\", function () {\r\n    if (navigator.geolocation) {\r\n      $(\"#loader\").show();\r\n      $(\".items-container\").hide();\r\n\r\n      navigator.geolocation.getCurrentPosition(function (position) {\r\n        var lat = position.coords.latitude;\r\n        var lon = position.coords.longitude;\r\n        updateWeatherInfoByCoordinates(lat, lon).then(updateForecastInfoByCoordinates(lat,lon)).then(() => {\r\n          // Oculta el loader una vez que se completa la llamada AJAX\r\n          $(\"#loader\").hide();\r\n          $(\".error\").hide();\r\n          $(\".bigItem-container\").show();\r\n\r\n        });\r\n        // Aquí puedes hacer una solicitud a una API de clima con la latitud y longitud\r\n      });\r\n    } else {\r\n      console.log(\"Geolocalización no es soportada por este navegador.\");\r\n    }\r\n  });\r\n  \r\n  function updateWeatherInfo(location) {\r\n    getWeatherByCity(location).then((weatherInfo) => {\r\n\r\n      console.log(weatherInfo);\r\n      if (!weatherInfo){\r\n          console.log(\"Weather info es indefined !!\");\r\n          return;\r\n      }\r\n      // Update the page with the new data\r\n      $(\".cityName\").text(weatherInfo.name);\r\n      $(\".description\").text(weatherInfo.weather[0].description);\r\n      $(\".temperature\").text(Math.round(weatherInfo.main.temp - 273.15) + \"°C\"); // Convert temperature from Kelvin to Celsius\r\n      $(\".humidity\").text(weatherInfo.main.humidity + \"%\");\r\n      $(\".wind\").text(weatherInfo.wind.speed + \"m/s\");\r\n      $(\".sunrise\").text(\r\n        new Date(weatherInfo.sys.sunrise * 1000).toLocaleTimeString([], {\r\n          hour: \"2-digit\",\r\n          minute: \"2-digit\",\r\n        })\r\n      );\r\n      $(\".sunset\").text(\r\n        new Date(weatherInfo.sys.sunset * 1000).toLocaleTimeString([], {\r\n          hour: \"2-digit\",\r\n          minute: \"2-digit\",\r\n        })\r\n      );\r\n      $(\".direction\").text(weatherInfo.wind.deg + \"°\");\r\n      $(\".visibility\").text(weatherInfo.visibility / 1000 + \" km\");\r\n      var weatherIcon = getWeatherImage(weatherInfo.weather[0].icon);\r\n      $('.picture source[type=\"image/avif\"]').attr(\r\n        \"srcset\",\r\n        `build/img/${weatherIcon}.avif`\r\n      );\r\n      $('.picture source[type=\"image/webp\"]').attr(\r\n        \"srcset\",\r\n        `build/img/${weatherIcon}.webp`\r\n      );\r\n      $(\".picture img\").attr(\"src\", `build/img/${weatherIcon}.png`);\r\n      weatherIcon = \"\";\r\n    });\r\n  }\r\n  \r\n\r\n  function updateWeatherInfoByCoordinates(lat, lon) {\r\n    return new Promise((resolve, reject) => {\r\n      getWeather(lon, lat).then((weatherInfo) => {\r\n        console.log(weatherInfo);\r\n        // Update the page with the new data\r\n        $(\".cityName\").text(weatherInfo.name);\r\n        $(\".description\").text(weatherInfo.weather[0].description);\r\n        $(\".temperature\").text(Math.round(weatherInfo.main.temp - 273.15) + \"°C\"); // Convert temperature from Kelvin to Celsius\r\n        $(\".humidity\").text(weatherInfo.main.humidity + \"%\");\r\n        $(\".wind\").text(weatherInfo.wind.speed + \"m/s\");\r\n        $(\".sunrise\").text(\r\n          new Date(weatherInfo.sys.sunrise * 1000).toLocaleTimeString([], {\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n          })\r\n        );\r\n        $(\".sunset\").text(\r\n          new Date(weatherInfo.sys.sunset * 1000).toLocaleTimeString([], {\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n          })\r\n        );\r\n        $(\".direction\").text(weatherInfo.wind.deg + \"°\");\r\n        $(\".visibility\").text(weatherInfo.visibility / 1000 + \" km\");\r\n        var weatherIcon = getWeatherImage(weatherInfo.weather[0].icon);\r\n        $('.picture source[type=\"image/avif\"]').attr(\r\n          \"srcset\",\r\n          `build/img/${weatherIcon}.avif`\r\n        );\r\n        $('.picture source[type=\"image/webp\"]').attr(\r\n          \"srcset\",\r\n          `build/img/${weatherIcon}.webp`\r\n        );\r\n        $(\".picture img\").attr(\"src\", `build/img/${weatherIcon}.png`);\r\n        weatherIcon = \"\";\r\n      });\r\n      resolve();\r\n    });\r\n  }\r\n  \r\n  function getWeatherImage(icon) {\r\n    var image;\r\n    switch (icon) {\r\n      case \"01d\":\r\n        image = \"01d\";\r\n        break;\r\n      case \"01n\":\r\n        image = \"01n\";\r\n        break;\r\n      case \"02d\":\r\n      case \"03d\":\r\n      case \"04d\":\r\n        image = \"02d\";\r\n        break;\r\n      case \"02n\":\r\n      case \"03n\":\r\n      case \"04n\":\r\n        image = \"02n\";\r\n        break;\r\n      case \"10d\":\r\n      case \"09d\":\r\n        image = \"10d\";\r\n        break;\r\n      case \"10n\":\r\n      case \"09n\":\r\n        image = \"10n\";\r\n        break;\r\n      case \"11d\":\r\n        image = \"11d\";\r\n        break;\r\n      case \"11n\":\r\n        image = \"11n\";\r\n        break;\r\n      case \"13d\":\r\n        image = \"13d\";\r\n        break;\r\n      case \"13n\":\r\n        image = \"13n\";\r\n        break;\r\n      case \"50d\":\r\n      case \"50n\":\r\n        image = \"50d\";\r\n      default:\r\n        image = \"default\";\r\n    }\r\n    return image;\r\n  }\r\n  function getForecast(lat, lon) {\r\n    var apiUrl = \"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&appid=\" + apiKey;\r\n  \r\n    return new Promise(function(resolve, reject) {\r\n      $.ajax({\r\n        url: apiUrl,\r\n        type: \"GET\",\r\n        success: function(data) {\r\n          resolve(data);\r\n        },\r\n        error: function(error) {\r\n          reject(error);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n\r\n  function updateForecastInfo(location) {\r\n    getCoordinates(location)\r\n      .then(coordinates => getForecast(coordinates.lat, coordinates.lon))\r\n      .then(data => {\r\n        if (!data){\r\n          console.log(\"There is no forecast !!\");\r\n          return;\r\n      }\r\n        // 'data.list' es un array que contiene los pronósticos para los próximos 5 días cada 3 horas\r\n        var forecasts = data.list;\r\n        // Filtramos los pronósticos para obtener uno por día\r\n        var dailyForecasts = forecasts.filter((forecast, index) => index % 8 === 0);\r\n  \r\n        // Vaciamos el contenedor de pronóstico\r\n        $(\".forecast-container .row\").empty();\r\n        \r\n        // Creamos un nuevo div para cada pronóstico diario\r\n        dailyForecasts.forEach((forecast, index) => {\r\n          var date = new Date(forecast.dt * 1000);  // La fecha del pronóstico\r\n          var temperature = Math.round(forecast.main.temp - 273.15); \r\n          var weatherIcon = forecast.weather[0].icon;  // El icono del tiempo\r\n          var image = getWeatherImage(weatherIcon)\r\n          var forecastDiv = `\r\n          <div class=\"col-12 col-md border day${index + 1} d-flex flex-column justify-content-center align-items-center\">\r\n          <p>${date.toDateString()}</p>\r\n          <picture>\r\n            <source srcset=\"build/img/${image}.avif\" type=\"image/avif\">\r\n            <source srcset=\"build/img/${image}.webp\" type=\"image/webp\">\r\n            <img loading=\"lazy\" src=\"build/img/${image}.jpg\" alt=\"\">\r\n          </picture>\r\n\r\n          <p class=\"fw-bold\">${temperature} °C</p>\r\n          </div>\r\n          `;\r\n          $(\".forecast-container\").show();\r\n          // Añadimos el div al contenedor de pronóstico\r\n          $(\".forecast-container .row\").append(forecastDiv);\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(error);  // Aquí puedes manejar los errores\r\n      });\r\n  }\r\n\r\n  function updateForecastInfoByCoordinates(lat, lon) {\r\n    getForecast(lat, lon)\r\n      .then(data => {\r\n        if (!data){\r\n          console.log(\"There is no forecast !!\");\r\n          return;\r\n      }\r\n\r\n        // 'data.list' es un array que contiene los pronósticos para los próximos 5 días cada 3 horas\r\n        var forecasts = data.list;\r\n  \r\n        // Filtramos los pronósticos para obtener uno por día\r\n        var dailyForecasts = forecasts.filter((forecast, index) => index % 8 === 0);\r\n  \r\n        // Vaciamos el contenedor de pronóstico\r\n        $(\".forecast-container .row\").empty();\r\n  \r\n        // Creamos un nuevo div para cada pronóstico diario\r\n        dailyForecasts.forEach((forecast, index) => {\r\n\r\n          var date = new Date(forecast.dt * 1000);  // La fecha del pronóstico\r\n          var temperature = Math.round(forecast.main.temp - 273.15); \r\n          var weatherIcon = forecast.weather[0].icon;  // El icono del tiempo\r\n          var image = getWeatherImage(weatherIcon)\r\n          var forecastDiv = `\r\n          <div class=\"col-12 col-md border day${index + 1} d-flex flex-column justify-content-center align-items-center\">\r\n          <p>${date.toDateString()}</p>\r\n\r\n          <picture>\r\n            <source srcset=\"build/img/${image}.avif\" type=\"image/avif\">\r\n            <source srcset=\"build/img/${image}.webp\" type=\"image/webp\">\r\n            <img loading=\"lazy\" src=\"build/img/${image}.jpg\" alt=\"\">\r\n          </picture>\r\n          <p class=\"fw-bold\">${temperature} °C</p>\r\n          </div>\r\n        \r\n          `;\r\n          $(\".forecast-container\").show();\r\n          // Añadimos el div al contenedor de pronóstico\r\n          $(\".forecast-container .row\").append(forecastDiv);\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(error);  // Aquí puedes manejar los errores\r\n      });\r\n}\r\n});\r\n\r\n"]}